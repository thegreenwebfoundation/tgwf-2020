/**
 * Main SCSS file loading in all the partials needed.
*/
/**
* Sass function and mixin to use rem units with optional pixel fallback.
* Author: Pierre Burel
* Source: https://github.com/pierreburel/sass-rem
*/
/**
 * Colour variables.
*/
/**
 * Variables for use throughout the rest of the SASS partials.
*/
/* Font definitions */
@font-face {
  font-family: 'miso';
  src: url("../fonts/miso/miso-webfont.woff2") format("woff2"), url("../fonts/miso/miso-webfont.woff") format("woff");
  font-weight: normal;
  font-style: normal; }

/**
 * Default typography styles and variables.
 * Overrides of key TwentyTwenty typography styles.
*/
/* Default typography styles and variables */
/**
 * Styling overrides for basic HTML elements.
*/
h1, h2, h3, h4, h5, h6 {
  font-family: "miso"; }
  h1 > a, h2 > a, h3 > a, h4 > a, h5 > a, h6 > a {
    text-decoration: none; }
    h1 > a:hover, h2 > a:hover, h3 > a:hover, h4 > a:hover, h5 > a:hover, h6 > a:hover {
      text-decoration: underline; }

a:link, a:hover {
  text-decoration: underline; }
  a:link:hover, a:hover:hover {
    text-decoration: none; }

/* Useful classes that can be reused in all sorts of great places */
/**
 * Base layout styles.
 * These are largely going to be affected the outer most containers of each page.
*/
/** Common styles in the Neve theme that we'd like to overwrite. */
.nv-page-title-wrap.nv-big-title .nv-page-title {
  border-width: 0; }

/**
 * Icons styling.
 * Typically these are SVGs taken from IcoMoon.
*/
/* 1. GENERAL ICONS            */
/* 2. MENU ICONS                */
/* 1. GENERAL ICONS            */
/* 2. MENU ICONS                */
/**
 * Social icons styling and layout
*/
/**
 * Button styles.
*/
/**
 * Styling common across all navigations menus,
 * even if we have to target lots of CSS classes specifically.
*/
/**
 * Styling and layout for the footer.
*/
/**
 * Styling and layouts for post custom meta data
 * Eg dates, taxonomies, authors etc
*/
/* 1. GENERAL STYLING      */
/* 2. POST / FULL METADATA */
/**
 * Various grid layouts for use in all sorts of places.
*/
/**
 * Pagination styling
*/
/**
 * General styling for forms
*/
/**
 * Custom clasess that can be applied to Gutenberg blocks.
*/
/* 1. GENERAL CLASSES     */
/* 2. COLOUR CLASSES      */
/* 1. GENERAL CLASSES     */
.alignfull > [class*="__inner-container"],
.alignwide > [class*="__inner-container"] {
  margin: auto; }

/* 2. COLOUR CLASSES      */
/**
 * Customisations for the group block.
*/
/* 1. GENERAL BLOCK CUSTOMISATIONS */
/* 2. CUSTOM CLASSES               */
/**
 * Tweaks and changes for the default Gutenberg cover block.
 * In this site, we expect the block to be inside the group block.
*/
/**
 * Customsations to the columns layout
*/
/**
 * Customisations for gutenberg button blocks.
*/
/* 1. CUSTOM CLASSES    */
/**
 * Styling / layout for the header
*/
/**
 * Styling and layout overrides specifically for the main menu.
 * Where possible we want this main menu to use default nav styles,
 * so these styles are only specific to the main and applied nowhere else.
*/
/* 1. GENERAL STYLES     */
/* 2. PRIMARY MENU       */
/* 3. MOBILE MENU        */
/* 1. GENERAL STYLES     */
/* 2. PRIMARY MENU       */
/* 3. MOBILE MENU        */
/**
 * Styling and layout overrides specifically for the main menu.
 * Where possible we want this main menu to use default nav styles,
 * so these styles are only specific to the main and applied nowhere else.
*/
/**
 * Styling and classes for featured images.
*/
/**
 * SCSS targetting posts of all types.
*/
/* 1. POST GENERAL       */
/* 2. POST CTA           */
/* 3. POST TEASER        */
/* 4. POST ARCHIVE       */
/**
 * Customisations for the homepage only.
*/
/* 1. HOMEPAGE NAV STYLES          */
/* 2. wp-block-group__home CLASS   */
/* 3. OTHER STYLING                */

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uc2NzcyIsIm1haW4uY3NzIiwiYmFzZS9fcmVtLnNjc3MiLCJiYXNlL19jb2xvdXJzLnNjc3MiLCJiYXNlL192YXJpYWJsZXMuc2NzcyIsImJhc2UvX2ZvbnRzLnNjc3MiLCJiYXNlL190eXBvZ3JhcGh5LnNjc3MiLCJiYXNlL19odG1sZWxlbWVudHMuc2NzcyIsImJhc2UvX3V0aWxpdGllcy5zY3NzIiwiYmFzZS9fbGF5b3V0LnNjc3MiLCJiYXNlL19uZXZlLWJhc2ljLXN0eWxlcy5zY3NzIiwiY29tcG9uZW50cy9faWNvbnMuc2NzcyIsImNvbXBvbmVudHMvX3NvY2lhbC1pY29ucy5zY3NzIiwiY29tcG9uZW50cy9fYnV0dG9uLnNjc3MiLCJjb21wb25lbnRzL19uYXZpZ2F0aW9uLnNjc3MiLCJjb21wb25lbnRzL19mb290ZXIuc2NzcyIsImNvbXBvbmVudHMvX3Bvc3QtbWV0YS5zY3NzIiwiY29tcG9uZW50cy9fZ3JpZHMuc2NzcyIsImNvbXBvbmVudHMvX3BhZ2luYXRpb24uc2NzcyIsImNvbXBvbmVudHMvX2Zvcm1zLnNjc3MiLCJibG9ja3MvX3V0aWxpdHktY2xhc3Nlcy5zY3NzIiwiYmxvY2tzL19ibG9jay1ncm91cC5zY3NzIiwiYmxvY2tzL19ibG9jay1jb3Zlci5zY3NzIiwiYmxvY2tzL19ibG9jay1jb2x1bW5zLnNjc3MiLCJibG9ja3MvX2Jsb2NrLWJ1dHRvbi5zY3NzIiwibGF5b3V0cy9faGVhZGVyLnNjc3MiLCJsYXlvdXRzL19tYWluLW1lbnUuc2NzcyIsImxheW91dHMvX2VudHJ5LWNsYXNzZXMuc2NzcyIsImxheW91dHMvX2ZlYXR1cmVkLWltYWdlLnNjc3MiLCJsYXlvdXRzL19wb3N0LnNjc3MiLCJwYWdlcy9faG9tZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztDQ0VDO0FDRkQ7Ozs7Q0RPQztBRVBEOztDRlVDO0FHVkQ7O0NIYUM7QUliRCxxQkFBQTtBQUVBO0VBQ0ksbUJBQW1CO0VBQ25CLG1IQUMwRDtFQUMxRCxtQkFBbUI7RUFDbkIsa0JBQWtCLEVBQUE7O0FDUHRCOzs7Q0x3QkM7QUtuQkQsNENBQUE7QUNMQTs7Q040QkM7QU1sQkQ7RUFDQyxtQkRKa0IsRUFBQTtFQ0duQjtJQUtFLHFCQUFxQixFQUFBO0lBTHZCO01BUUcsMEJBQTBCLEVBQUE7O0FBUTdCO0VBQ0MsMEJBQTBCLEVBQUE7RUFEM0I7SUFJRSxxQkFBcUIsRUFBQTs7QUM5QnZCLG1FQUFBO0FDQUE7OztDUjZDQztBUzdDRCxrRUFBQTtBQUVBO0VBQ0MsZUFBZSxFQUFBOztBQ0hoQjs7O0NWcURDO0FVaERELGdDQUFBO0FBQ0EsaUNBQUE7QUFJQSxnQ0FBQTtBQUdBLGlDQUFBO0FDYkE7O0NYNERDO0FZNUREOztDWitEQztBYS9ERDs7O0NibUVDO0FjbkVEOztDZHNFQztBZXRFRDs7O0NmMEVDO0FlckVELDRCQUFBO0FBQ0EsNEJBQUE7QUNOQTs7Q2hCK0VDO0FpQi9FRDs7Q2pCa0ZDO0FrQmxGRDs7Q2xCcUZDO0FtQnJGRDs7Q25Cd0ZDO0FtQnBGRCwyQkFBQTtBQUNBLDJCQUFBO0FBSUEsMkJBQUE7QUFLQTs7RUFFQyxZQUFZLEVBQUE7O0FBSWIsMkJBQUE7QUNwQkE7O0NwQm1HQztBb0IvRkQsb0NBQUE7QUFDQSxvQ0FBQTtBQ0xBOzs7Q3JCeUdDO0FzQnpHRDs7Q3RCNEdDO0F1QjVHRDs7Q3ZCK0dDO0F1QjNHRCx5QkFBQTtBQ0pBOztDeEJtSEM7QXlCbkhEOzs7O0N6QndIQztBeUJqSEQsMEJBQUE7QUFDQSwwQkFBQTtBQUNBLDBCQUFBO0FBSUEsMEJBQUE7QUFJQSwwQkFBQTtBQUlBLDBCQUFBO0FDckJBOzs7O0MxQm1JQztBMkJuSUQ7O0MzQnNJQztBNEJ0SUQ7O0M1QnlJQztBNEJySUQsMEJBQUE7QUFDQSwwQkFBQTtBQUNBLDBCQUFBO0FBQ0EsMEJBQUE7QUNQQTs7QzdCZ0pDO0E2QjVJRCxvQ0FBQTtBQUNBLG9DQUFBO0FBQ0Esb0NBQUEiLCJmaWxlIjoibWFpbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1haW4gU0NTUyBmaWxlIGxvYWRpbmcgaW4gYWxsIHRoZSBwYXJ0aWFscyBuZWVkZWQuXG4qL1xuXG4vLyBCb290c3RyYXAgZ3JpZCBcbkBpbXBvcnQgXCJib290c3RyYXAvZnVuY3Rpb25zXCI7XG5AaW1wb3J0IFwiYm9vdHN0cmFwL3ZhcmlhYmxlc1wiO1xuXG5AaW1wb3J0IFwiYm9vdHN0cmFwL21peGlucy9icmVha3BvaW50c1wiO1xuQGltcG9ydCBcImJvb3RzdHJhcC9taXhpbnMvZ3JpZC1mcmFtZXdvcmtcIjtcbkBpbXBvcnQgXCJib290c3RyYXAvbWl4aW5zL2dyaWRcIjtcblxuLy8gQGltcG9ydCBcImJvb3RzdHJhcC9ncmlkXCI7XG4vLyBAaW1wb3J0IFwiYm9vdHN0cmFwL3V0aWxpdGllcy9kaXNwbGF5XCI7XG4vLyBAaW1wb3J0IFwiYm9vdHN0cmFwL3V0aWxpdGllcy9mbGV4XCI7XG5cblxuLy8gQmFzZSBzdHlsZXNcbi8vIENvcmUgc3R5bGVzIHRoYXQgZm9ybSB0aGUgYmFzZSBicmFuZCBhbmQgbGF5b3V0LlxuQGltcG9ydCAnYmFzZS9yZW0nO1xuQGltcG9ydCAnYmFzZS9jb2xvdXJzJztcbkBpbXBvcnQgJ2Jhc2UvdmFyaWFibGVzJztcbkBpbXBvcnQgJ2Jhc2UvZm9udHMnO1xuQGltcG9ydCAnYmFzZS90eXBvZ3JhcGh5JztcbkBpbXBvcnQgJ2Jhc2UvaHRtbGVsZW1lbnRzJztcbkBpbXBvcnQgJ2Jhc2UvdXRpbGl0aWVzJztcbkBpbXBvcnQgJ2Jhc2UvbGF5b3V0JztcbkBpbXBvcnQgJ2Jhc2UvbmV2ZS1iYXNpYy1zdHlsZXMnO1xuXG5cbi8vIFJldXNhYmxlIGNvbXBvbmVudHNcbi8vIFN0eWxlcyBvciBsYXlvdXRzIHRoYXQgY291bGQgYXBwZWFyIG11bHRpcGxlIHRpbWVzIG9uIGFuIGdpdmVuIHNjcmVlbi5cbkBpbXBvcnQgJ2NvbXBvbmVudHMvaWNvbnMnO1xuQGltcG9ydCAnY29tcG9uZW50cy9zb2NpYWwtaWNvbnMnO1xuQGltcG9ydCAnY29tcG9uZW50cy9idXR0b24nO1xuQGltcG9ydCAnY29tcG9uZW50cy9uYXZpZ2F0aW9uJztcbkBpbXBvcnQgJ2NvbXBvbmVudHMvZm9vdGVyJztcbkBpbXBvcnQgJ2NvbXBvbmVudHMvcG9zdC1tZXRhJztcbkBpbXBvcnQgJ2NvbXBvbmVudHMvZ3JpZHMnO1xuQGltcG9ydCAnY29tcG9uZW50cy9wYWdpbmF0aW9uJztcbkBpbXBvcnQgJ2NvbXBvbmVudHMvZm9ybXMnO1xuXG5cbi8vIEd1dGVuYmVyZyBibG9ja3NcbkBpbXBvcnQgJ2Jsb2Nrcy91dGlsaXR5LWNsYXNzZXMnO1xuQGltcG9ydCAnYmxvY2tzL2Jsb2NrLWdyb3VwJztcbkBpbXBvcnQgJ2Jsb2Nrcy9ibG9jay1jb3Zlcic7XG5AaW1wb3J0ICdibG9ja3MvYmxvY2stY29sdW1ucyc7XG5AaW1wb3J0ICdibG9ja3MvYmxvY2stYnV0dG9uJztcblxuXG5cbi8vIFZlbmRvclxuLy8gU3R5bGluZyBhbmQgY3VzdG9taXNhdGlvbnMgZm9yIHBsdWdpbnMgb3Igb3RoZXIgdGhpcmQgcGFydHkgY29kZS5cblxuXG5cbi8vIExheW91dHNcbi8vIExheW91dHMgZm9yIHNlY3Rpb25zIHlvdSdkIGV4cGVjdCB0byBvbmx5IGZpbmQgb25jZSBwZXIgcGFnZS5cbkBpbXBvcnQgJ2xheW91dHMvaGVhZGVyJztcbkBpbXBvcnQgJ2xheW91dHMvbWFpbi1tZW51JztcbkBpbXBvcnQgJ2xheW91dHMvZW50cnktY2xhc3Nlcyc7XG5AaW1wb3J0ICdsYXlvdXRzL2ZlYXR1cmVkLWltYWdlJztcbkBpbXBvcnQgJ2xheW91dHMvcG9zdCc7XG5cblxuXG4vLyBDb250ZW50IHBhcnRpYWxzXG4vLyBTdHlsZXMgYW5kIGxheW91dHMgdGhhdCBtYXRjaCB1cCB3aXRoIGEgc3BlY2lmaWMgcGhwIHRlbXBsYXRlLlxuLy8gVGhlc2UgcGhwIGZpbGVzIGFyZSB0eXBpY2FsbHkgZm91bmQgaW4gL3RlbXBsYXRlLXBhcnRzL1xuXG5cbi8vIFBhZ2VzXG4vLyBVbmlxdWUgY3VzdG9taXNhdGlvbnMgZm9yIGEgc3BlY2lmaWMgcGFnZS5cbi8vIFR5cGljYWxseSB0aGVzZSBzdHlsZXMgY2FuJ3QgYmUgdXNlZCBlbHNld2hlcmUuXG4vLyBUaGVzZSBhcmUgbG9hZGVkIGFscGhhYmV0aWNhbGx5LlxuQGltcG9ydCAncGFnZXMvaG9tZSc7XG4iLCIvKipcbiAqIE1haW4gU0NTUyBmaWxlIGxvYWRpbmcgaW4gYWxsIHRoZSBwYXJ0aWFscyBuZWVkZWQuXG4qL1xuLyoqXG4qIFNhc3MgZnVuY3Rpb24gYW5kIG1peGluIHRvIHVzZSByZW0gdW5pdHMgd2l0aCBvcHRpb25hbCBwaXhlbCBmYWxsYmFjay5cbiogQXV0aG9yOiBQaWVycmUgQnVyZWxcbiogU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vcGllcnJlYnVyZWwvc2Fzcy1yZW1cbiovXG4vKipcbiAqIENvbG91ciB2YXJpYWJsZXMuXG4qL1xuLyoqXG4gKiBWYXJpYWJsZXMgZm9yIHVzZSB0aHJvdWdob3V0IHRoZSByZXN0IG9mIHRoZSBTQVNTIHBhcnRpYWxzLlxuKi9cbi8qIEZvbnQgZGVmaW5pdGlvbnMgKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ21pc28nO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL21pc28vbWlzby13ZWJmb250LndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250cy9taXNvL21pc28td2ViZm9udC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxuXG4vKipcbiAqIERlZmF1bHQgdHlwb2dyYXBoeSBzdHlsZXMgYW5kIHZhcmlhYmxlcy5cbiAqIE92ZXJyaWRlcyBvZiBrZXkgVHdlbnR5VHdlbnR5IHR5cG9ncmFwaHkgc3R5bGVzLlxuKi9cbi8qIERlZmF1bHQgdHlwb2dyYXBoeSBzdHlsZXMgYW5kIHZhcmlhYmxlcyAqL1xuLyoqXG4gKiBTdHlsaW5nIG92ZXJyaWRlcyBmb3IgYmFzaWMgSFRNTCBlbGVtZW50cy5cbiovXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcbiAgZm9udC1mYW1pbHk6IFwibWlzb1wiOyB9XG4gIGgxID4gYSwgaDIgPiBhLCBoMyA+IGEsIGg0ID4gYSwgaDUgPiBhLCBoNiA+IGEge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuICAgIGgxID4gYTpob3ZlciwgaDIgPiBhOmhvdmVyLCBoMyA+IGE6aG92ZXIsIGg0ID4gYTpob3ZlciwgaDUgPiBhOmhvdmVyLCBoNiA+IGE6aG92ZXIge1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cblxuYTpsaW5rLCBhOmhvdmVyIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cbiAgYTpsaW5rOmhvdmVyLCBhOmhvdmVyOmhvdmVyIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cblxuLyogVXNlZnVsIGNsYXNzZXMgdGhhdCBjYW4gYmUgcmV1c2VkIGluIGFsbCBzb3J0cyBvZiBncmVhdCBwbGFjZXMgKi9cbi8qKlxuICogQmFzZSBsYXlvdXQgc3R5bGVzLlxuICogVGhlc2UgYXJlIGxhcmdlbHkgZ29pbmcgdG8gYmUgYWZmZWN0ZWQgdGhlIG91dGVyIG1vc3QgY29udGFpbmVycyBvZiBlYWNoIHBhZ2UuXG4qL1xuLyoqIENvbW1vbiBzdHlsZXMgaW4gdGhlIE5ldmUgdGhlbWUgdGhhdCB3ZSdkIGxpa2UgdG8gb3ZlcndyaXRlLiAqL1xuLm52LXBhZ2UtdGl0bGUtd3JhcC5udi1iaWctdGl0bGUgLm52LXBhZ2UtdGl0bGUge1xuICBib3JkZXItd2lkdGg6IDA7IH1cblxuLyoqXG4gKiBJY29ucyBzdHlsaW5nLlxuICogVHlwaWNhbGx5IHRoZXNlIGFyZSBTVkdzIHRha2VuIGZyb20gSWNvTW9vbi5cbiovXG4vKiAxLiBHRU5FUkFMIElDT05TICAgICAgICAgICAgKi9cbi8qIDIuIE1FTlUgSUNPTlMgICAgICAgICAgICAgICAgKi9cbi8qIDEuIEdFTkVSQUwgSUNPTlMgICAgICAgICAgICAqL1xuLyogMi4gTUVOVSBJQ09OUyAgICAgICAgICAgICAgICAqL1xuLyoqXG4gKiBTb2NpYWwgaWNvbnMgc3R5bGluZyBhbmQgbGF5b3V0XG4qL1xuLyoqXG4gKiBCdXR0b24gc3R5bGVzLlxuKi9cbi8qKlxuICogU3R5bGluZyBjb21tb24gYWNyb3NzIGFsbCBuYXZpZ2F0aW9ucyBtZW51cyxcbiAqIGV2ZW4gaWYgd2UgaGF2ZSB0byB0YXJnZXQgbG90cyBvZiBDU1MgY2xhc3NlcyBzcGVjaWZpY2FsbHkuXG4qL1xuLyoqXG4gKiBTdHlsaW5nIGFuZCBsYXlvdXQgZm9yIHRoZSBmb290ZXIuXG4qL1xuLyoqXG4gKiBTdHlsaW5nIGFuZCBsYXlvdXRzIGZvciBwb3N0IGN1c3RvbSBtZXRhIGRhdGFcbiAqIEVnIGRhdGVzLCB0YXhvbm9taWVzLCBhdXRob3JzIGV0Y1xuKi9cbi8qIDEuIEdFTkVSQUwgU1RZTElORyAgICAgICovXG4vKiAyLiBQT1NUIC8gRlVMTCBNRVRBREFUQSAqL1xuLyoqXG4gKiBWYXJpb3VzIGdyaWQgbGF5b3V0cyBmb3IgdXNlIGluIGFsbCBzb3J0cyBvZiBwbGFjZXMuXG4qL1xuLyoqXG4gKiBQYWdpbmF0aW9uIHN0eWxpbmdcbiovXG4vKipcbiAqIEdlbmVyYWwgc3R5bGluZyBmb3IgZm9ybXNcbiovXG4vKipcbiAqIEN1c3RvbSBjbGFzZXNzIHRoYXQgY2FuIGJlIGFwcGxpZWQgdG8gR3V0ZW5iZXJnIGJsb2Nrcy5cbiovXG4vKiAxLiBHRU5FUkFMIENMQVNTRVMgICAgICovXG4vKiAyLiBDT0xPVVIgQ0xBU1NFUyAgICAgICovXG4vKiAxLiBHRU5FUkFMIENMQVNTRVMgICAgICovXG4uYWxpZ25mdWxsID4gW2NsYXNzKj1cIl9faW5uZXItY29udGFpbmVyXCJdLFxuLmFsaWdud2lkZSA+IFtjbGFzcyo9XCJfX2lubmVyLWNvbnRhaW5lclwiXSB7XG4gIG1hcmdpbjogYXV0bzsgfVxuXG4vKiAyLiBDT0xPVVIgQ0xBU1NFUyAgICAgICovXG4vKipcbiAqIEN1c3RvbWlzYXRpb25zIGZvciB0aGUgZ3JvdXAgYmxvY2suXG4qL1xuLyogMS4gR0VORVJBTCBCTE9DSyBDVVNUT01JU0FUSU9OUyAqL1xuLyogMi4gQ1VTVE9NIENMQVNTRVMgICAgICAgICAgICAgICAqL1xuLyoqXG4gKiBUd2Vha3MgYW5kIGNoYW5nZXMgZm9yIHRoZSBkZWZhdWx0IEd1dGVuYmVyZyBjb3ZlciBibG9jay5cbiAqIEluIHRoaXMgc2l0ZSwgd2UgZXhwZWN0IHRoZSBibG9jayB0byBiZSBpbnNpZGUgdGhlIGdyb3VwIGJsb2NrLlxuKi9cbi8qKlxuICogQ3VzdG9tc2F0aW9ucyB0byB0aGUgY29sdW1ucyBsYXlvdXRcbiovXG4vKipcbiAqIEN1c3RvbWlzYXRpb25zIGZvciBndXRlbmJlcmcgYnV0dG9uIGJsb2Nrcy5cbiovXG4vKiAxLiBDVVNUT00gQ0xBU1NFUyAgICAqL1xuLyoqXG4gKiBTdHlsaW5nIC8gbGF5b3V0IGZvciB0aGUgaGVhZGVyXG4qL1xuLyoqXG4gKiBTdHlsaW5nIGFuZCBsYXlvdXQgb3ZlcnJpZGVzIHNwZWNpZmljYWxseSBmb3IgdGhlIG1haW4gbWVudS5cbiAqIFdoZXJlIHBvc3NpYmxlIHdlIHdhbnQgdGhpcyBtYWluIG1lbnUgdG8gdXNlIGRlZmF1bHQgbmF2IHN0eWxlcyxcbiAqIHNvIHRoZXNlIHN0eWxlcyBhcmUgb25seSBzcGVjaWZpYyB0byB0aGUgbWFpbiBhbmQgYXBwbGllZCBub3doZXJlIGVsc2UuXG4qL1xuLyogMS4gR0VORVJBTCBTVFlMRVMgICAgICovXG4vKiAyLiBQUklNQVJZIE1FTlUgICAgICAgKi9cbi8qIDMuIE1PQklMRSBNRU5VICAgICAgICAqL1xuLyogMS4gR0VORVJBTCBTVFlMRVMgICAgICovXG4vKiAyLiBQUklNQVJZIE1FTlUgICAgICAgKi9cbi8qIDMuIE1PQklMRSBNRU5VICAgICAgICAqL1xuLyoqXG4gKiBTdHlsaW5nIGFuZCBsYXlvdXQgb3ZlcnJpZGVzIHNwZWNpZmljYWxseSBmb3IgdGhlIG1haW4gbWVudS5cbiAqIFdoZXJlIHBvc3NpYmxlIHdlIHdhbnQgdGhpcyBtYWluIG1lbnUgdG8gdXNlIGRlZmF1bHQgbmF2IHN0eWxlcyxcbiAqIHNvIHRoZXNlIHN0eWxlcyBhcmUgb25seSBzcGVjaWZpYyB0byB0aGUgbWFpbiBhbmQgYXBwbGllZCBub3doZXJlIGVsc2UuXG4qL1xuLyoqXG4gKiBTdHlsaW5nIGFuZCBjbGFzc2VzIGZvciBmZWF0dXJlZCBpbWFnZXMuXG4qL1xuLyoqXG4gKiBTQ1NTIHRhcmdldHRpbmcgcG9zdHMgb2YgYWxsIHR5cGVzLlxuKi9cbi8qIDEuIFBPU1QgR0VORVJBTCAgICAgICAqL1xuLyogMi4gUE9TVCBDVEEgICAgICAgICAgICovXG4vKiAzLiBQT1NUIFRFQVNFUiAgICAgICAgKi9cbi8qIDQuIFBPU1QgQVJDSElWRSAgICAgICAqL1xuLyoqXG4gKiBDdXN0b21pc2F0aW9ucyBmb3IgdGhlIGhvbWVwYWdlIG9ubHkuXG4qL1xuLyogMS4gSE9NRVBBR0UgTkFWIFNUWUxFUyAgICAgICAgICAqL1xuLyogMi4gd3AtYmxvY2stZ3JvdXBfX2hvbWUgQ0xBU1MgICAqL1xuLyogMy4gT1RIRVIgU1RZTElORyAgICAgICAgICAgICAgICAqL1xuIiwiLyoqXG4qIFNhc3MgZnVuY3Rpb24gYW5kIG1peGluIHRvIHVzZSByZW0gdW5pdHMgd2l0aCBvcHRpb25hbCBwaXhlbCBmYWxsYmFjay5cbiogQXV0aG9yOiBQaWVycmUgQnVyZWxcbiogU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vcGllcnJlYnVyZWwvc2Fzcy1yZW1cbiovXG5cbiRyZW0tYmFzZWxpbmU6IDE2cHggIWRlZmF1bHQ7XG4kcmVtLWZhbGxiYWNrOiBmYWxzZSAhZGVmYXVsdDtcbiRyZW0tcHgtb25seTogZmFsc2UgIWRlZmF1bHQ7XG5cbkBmdW5jdGlvbiByZW0tc2VwYXJhdG9yKCRsaXN0LCAkc2VwYXJhdG9yOiBmYWxzZSkge1xuICBAaWYgJHNlcGFyYXRvciA9PSBcImNvbW1hXCIgb3IgJHNlcGFyYXRvciA9PSBcInNwYWNlXCIge1xuICAgIEByZXR1cm4gYXBwZW5kKCRsaXN0LCBudWxsLCAkc2VwYXJhdG9yKTtcbiAgfSBcbiAgXG4gIEBpZiBmdW5jdGlvbi1leGlzdHMoXCJsaXN0LXNlcGFyYXRvclwiKSA9PSB0cnVlIHtcbiAgICBAcmV0dXJuIGxpc3Qtc2VwYXJhdG9yKCRsaXN0KTtcbiAgfVxuXG4gIC8vIGxpc3Qtc2VwYXJhdG9yIHBvbHlmaWxsIGJ5IEh1Z28gR2lyYXVkZWwgKGh0dHBzOi8vc2Fzcy1jb21wYXRpYmlsaXR5LmdpdGh1Yi5pby8jbGlzdF9zZXBhcmF0b3JfZnVuY3Rpb24pXG4gICR0ZXN0LWxpc3Q6ICgpO1xuICBAZWFjaCAkaXRlbSBpbiAkbGlzdCB7XG4gICAgJHRlc3QtbGlzdDogYXBwZW5kKCR0ZXN0LWxpc3QsICRpdGVtLCBzcGFjZSk7XG4gIH1cblxuICBAcmV0dXJuIGlmKCR0ZXN0LWxpc3QgPT0gJGxpc3QsIHNwYWNlLCBjb21tYSk7XG59XG5cbkBtaXhpbiByZW0tYmFzZWxpbmUoJHpvb206IDEwMCUpIHtcbiAgZm9udC1zaXplOiAkem9vbSAvIDE2cHggKiAkcmVtLWJhc2VsaW5lO1xufVxuXG5AZnVuY3Rpb24gcmVtLWNvbnZlcnQoJHRvLCAkdmFsdWVzLi4uKSB7XG4gICRyZXN1bHQ6ICgpO1xuICAkc2VwYXJhdG9yOiByZW0tc2VwYXJhdG9yKCR2YWx1ZXMpO1xuICBcbiAgQGVhY2ggJHZhbHVlIGluICR2YWx1ZXMge1xuICAgIEBpZiB0eXBlLW9mKCR2YWx1ZSkgPT0gXCJudW1iZXJcIiBhbmQgdW5pdCgkdmFsdWUpID09IFwicmVtXCIgYW5kICR0byA9PSBcInB4XCIge1xuICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsICR2YWx1ZSAvIDFyZW0gKiAkcmVtLWJhc2VsaW5lLCAkc2VwYXJhdG9yKTtcbiAgICB9IEBlbHNlIGlmIHR5cGUtb2YoJHZhbHVlKSA9PSBcIm51bWJlclwiIGFuZCB1bml0KCR2YWx1ZSkgPT0gXCJweFwiIGFuZCAkdG8gPT0gXCJyZW1cIiB7XG4gICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgJHZhbHVlIC8gJHJlbS1iYXNlbGluZSAqIDFyZW0sICRzZXBhcmF0b3IpO1xuICAgIH0gQGVsc2UgaWYgdHlwZS1vZigkdmFsdWUpID09IFwibGlzdFwiIHtcbiAgICAgICR2YWx1ZS1zZXBhcmF0b3I6IHJlbS1zZXBhcmF0b3IoJHZhbHVlKTtcbiAgICAgICR2YWx1ZTogcmVtLWNvbnZlcnQoJHRvLCAkdmFsdWUuLi4pO1xuICAgICAgJHZhbHVlOiByZW0tc2VwYXJhdG9yKCR2YWx1ZSwgJHZhbHVlLXNlcGFyYXRvcik7XG4gICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgJHZhbHVlLCAkc2VwYXJhdG9yKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCAkdmFsdWUsICRzZXBhcmF0b3IpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gaWYobGVuZ3RoKCRyZXN1bHQpID09IDEsIG50aCgkcmVzdWx0LCAxKSwgJHJlc3VsdCk7XG59XG5cbkBmdW5jdGlvbiByZW0oJHZhbHVlcy4uLikge1xuICBAaWYgJHJlbS1weC1vbmx5IHtcbiAgICBAcmV0dXJuIHJlbS1jb252ZXJ0KHB4LCAkdmFsdWVzLi4uKTtcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiByZW0tY29udmVydChyZW0sICR2YWx1ZXMuLi4pO1xuICB9XG59XG5cbkBtaXhpbiByZW0oJHByb3BlcnRpZXMsICR2YWx1ZXMuLi4pIHtcbiAgQGlmIHR5cGUtb2YoJHByb3BlcnRpZXMpID09IFwibWFwXCIge1xuICAgIEBlYWNoICRwcm9wZXJ0eSBpbiBtYXAta2V5cygkcHJvcGVydGllcykge1xuICAgICAgQGluY2x1ZGUgcmVtKCRwcm9wZXJ0eSwgbWFwLWdldCgkcHJvcGVydGllcywgJHByb3BlcnR5KSk7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAZWFjaCAkcHJvcGVydHkgaW4gJHByb3BlcnRpZXMge1xuICAgICAgQGlmICRyZW0tZmFsbGJhY2sgb3IgJHJlbS1weC1vbmx5IHtcbiAgICAgICAgI3skcHJvcGVydHl9OiByZW0tY29udmVydChweCwgJHZhbHVlcy4uLik7XG4gICAgICB9XG4gICAgICBAaWYgbm90ICRyZW0tcHgtb25seSB7XG4gICAgICAgICN7JHByb3BlcnR5fTogcmVtLWNvbnZlcnQocmVtLCAkdmFsdWVzLi4uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iLCIvKipcbiAqIENvbG91ciB2YXJpYWJsZXMuXG4qL1xuXG4iLCIvKipcbiAqIFZhcmlhYmxlcyBmb3IgdXNlIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhlIFNBU1MgcGFydGlhbHMuXG4qL1xuXG5cbi8vIENvbW1vbmx5IHVzZWQgbGF5b3V0IGRpbWVuc2lvbnMuXG4vLyAkYm9yZGVyLXRoaWNrbmVzczogNHB4O1xuLy8gJGJvcmRlci1yYWRpdXM6IDQwcHg7XG5cbi8vICRyZWFkaW5nLXdpZHRoOiA3MDBweDtcblxuLy8gJGljb24tc2l6ZTogNDBweDtcblxuLy8gJHNtYWxsLXNwYWNpbmc6IDEwcHg7XG4vLyAkbWVkaXVtLXNwYWNpbmc6IDE1cHg7XG4vLyAkbGFyZ2Utc3BhY2luZzogMzBweDsiLCIvKiBGb250IGRlZmluaXRpb25zICovXG5cbkBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnbWlzbyc7XG4gICAgc3JjOiB1cmwoJy4uL2ZvbnRzL21pc28vbWlzby13ZWJmb250LndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxuICAgICAgICAgdXJsKCcuLi9mb250cy9taXNvL21pc28td2ViZm9udC53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG59XG4iLCIvKipcbiAqIERlZmF1bHQgdHlwb2dyYXBoeSBzdHlsZXMgYW5kIHZhcmlhYmxlcy5cbiAqIE92ZXJyaWRlcyBvZiBrZXkgVHdlbnR5VHdlbnR5IHR5cG9ncmFwaHkgc3R5bGVzLlxuKi9cblxuLyogRGVmYXVsdCB0eXBvZ3JhcGh5IHN0eWxlcyBhbmQgdmFyaWFibGVzICovXG4vLyAkYm9keS1mb250OiAnbmV4YV9saWdodHJlZ3VsYXInO1xuJHRpdGxlLWZvbnQ6ICdtaXNvJztcblxuLy8gJGRlZmF1bHQtZm9udC1jb2xvdXI6ICR2MjQtYmxhY2s7XG5cbi8vICRkZWZhdWx0LWZvbnQtd2VpZ2h0OiAzMDA7XG4vLyAkYm9sZC1mb250LXdlaWdodDogNzAwO1xuIiwiLyoqXG4gKiBTdHlsaW5nIG92ZXJyaWRlcyBmb3IgYmFzaWMgSFRNTCBlbGVtZW50cy5cbiovXG5cbmJvZHkge1xuXHQvLyBmb250LWZhbWlseTogJGJvZHktZm9udDtcblx0Ly8gZm9udC13ZWlnaHQ6ICRkZWZhdWx0LWZvbnQtd2VpZ2h0O1xuXHQvLyBjb2xvcjogJGRlZmF1bHQtZm9udC1jb2xvdXI7XG59XG5cbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYge1xuXHRmb250LWZhbWlseTogJHRpdGxlLWZvbnQ7XG5cdC8vIGZvbnQtd2VpZ2h0OiAkYm9sZC1mb250LXdlaWdodDtcblxuXHQ+IGEge1xuXHRcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblx0XHRcblx0XHQmOmhvdmVyIHtcblx0XHRcdHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuXHRcdH1cblx0fVxufVxuXG5oMSB7XG59XG5cbmE6bGluaywgYTpob3ZlciB7XG5cdHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuXHRcblx0Jjpob3ZlciB7XG5cdFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXHR9XG59IiwiLyogVXNlZnVsIGNsYXNzZXMgdGhhdCBjYW4gYmUgcmV1c2VkIGluIGFsbCBzb3J0cyBvZiBncmVhdCBwbGFjZXMgKi9cblxuLy8gLy8gRm9yY2UgYW4gZWxlbWVudCB0byBiZWNvbWUgdGhlIGZ1bGwtd2lkdGggb2YgdGhlIHNjcmVlbi5cbi8vIEBtaXhpbiBmb3JjZS1mdWxsLXdpZHRoIHtcbi8vICAgICB3aWR0aDogMTAwdnc7XG4vLyAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuLy8gICAgIGxlZnQ6IDUwJTtcbi8vICAgICByaWdodDogNTAlO1xuLy8gICAgIG1hcmdpbi1sZWZ0OiAtNTB2dztcbi8vICAgICBtYXJnaW4tcmlnaHQ6IC01MHZ3O1xuLy8gfVxuXG4vLyAuZnVsbC13aWR0aCwgLmFsaWduZnVsbCB7XG4vLyBcdEBpbmNsdWRlIGZvcmNlLWZ1bGwtd2lkdGg7XG4vLyB9XG4iLCIvKipcbiAqIEJhc2UgbGF5b3V0IHN0eWxlcy5cbiAqIFRoZXNlIGFyZSBsYXJnZWx5IGdvaW5nIHRvIGJlIGFmZmVjdGVkIHRoZSBvdXRlciBtb3N0IGNvbnRhaW5lcnMgb2YgZWFjaCBwYWdlLlxuKi9cblxuIiwiLyoqIENvbW1vbiBzdHlsZXMgaW4gdGhlIE5ldmUgdGhlbWUgdGhhdCB3ZSdkIGxpa2UgdG8gb3ZlcndyaXRlLiAqL1xuXG4ubnYtcGFnZS10aXRsZS13cmFwLm52LWJpZy10aXRsZSAubnYtcGFnZS10aXRsZSB7XG5cdGJvcmRlci13aWR0aDogMDtcbn0iLCIvKipcbiAqIEljb25zIHN0eWxpbmcuXG4gKiBUeXBpY2FsbHkgdGhlc2UgYXJlIFNWR3MgdGFrZW4gZnJvbSBJY29Nb29uLlxuKi9cblxuLyogMS4gR0VORVJBTCBJQ09OUyAgICAgICAgICAgICovXG4vKiAyLiBNRU5VIElDT05TICAgICAgICAgICAgICAgICovXG5cblxuXG4vKiAxLiBHRU5FUkFMIElDT05TICAgICAgICAgICAgKi9cblxuXG4vKiAyLiBNRU5VIElDT05TICAgICAgICAgICAgICAgICovXG4iLCIvKipcbiAqIFNvY2lhbCBpY29ucyBzdHlsaW5nIGFuZCBsYXlvdXRcbiovXG5cbiIsIi8qKlxuICogQnV0dG9uIHN0eWxlcy5cbiovXG4iLCIvKipcbiAqIFN0eWxpbmcgY29tbW9uIGFjcm9zcyBhbGwgbmF2aWdhdGlvbnMgbWVudXMsXG4gKiBldmVuIGlmIHdlIGhhdmUgdG8gdGFyZ2V0IGxvdHMgb2YgQ1NTIGNsYXNzZXMgc3BlY2lmaWNhbGx5LlxuKi9cbiIsIi8qKlxuICogU3R5bGluZyBhbmQgbGF5b3V0IGZvciB0aGUgZm9vdGVyLlxuKi9cbiIsIi8qKlxuICogU3R5bGluZyBhbmQgbGF5b3V0cyBmb3IgcG9zdCBjdXN0b20gbWV0YSBkYXRhXG4gKiBFZyBkYXRlcywgdGF4b25vbWllcywgYXV0aG9ycyBldGNcbiovXG5cbi8qIDEuIEdFTkVSQUwgU1RZTElORyAgICAgICovXG4vKiAyLiBQT1NUIC8gRlVMTCBNRVRBREFUQSAqL1xuIiwiLyoqXG4gKiBWYXJpb3VzIGdyaWQgbGF5b3V0cyBmb3IgdXNlIGluIGFsbCBzb3J0cyBvZiBwbGFjZXMuXG4qL1xuIiwiLyoqXG4gKiBQYWdpbmF0aW9uIHN0eWxpbmdcbiovXG4iLCIvKipcbiAqIEdlbmVyYWwgc3R5bGluZyBmb3IgZm9ybXNcbiovXG5cbiIsIi8qKlxuICogQ3VzdG9tIGNsYXNlc3MgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBHdXRlbmJlcmcgYmxvY2tzLlxuKi9cblxuLyogMS4gR0VORVJBTCBDTEFTU0VTICAgICAqL1xuLyogMi4gQ09MT1VSIENMQVNTRVMgICAgICAqL1xuXG5cblxuLyogMS4gR0VORVJBTCBDTEFTU0VTICAgICAqL1xuXG4vLyBUaGlzIHNob3VsZCBiZSBpbiB0aGUgdGhlbWUgYnV0IGZvciBzb21lIHJlYXNvbiBkb2Vzbid0IGFsd2F5cyBhcHBseS5cbi8vIFNvbWV0aW1lcyBpdCBzaG93cyB1cCBhcyBhbiBpbmxpbmUgc3R5bGUuXG4vLyBJdCdzIGhlcmUgYXMgYmFja3VwLlxuLmFsaWduZnVsbCA+IFtjbGFzcyo9XCJfX2lubmVyLWNvbnRhaW5lclwiXSxcbi5hbGlnbndpZGUgPiBbY2xhc3MqPVwiX19pbm5lci1jb250YWluZXJcIl0ge1xuXHRtYXJnaW46IGF1dG87XG59XG5cblxuLyogMi4gQ09MT1VSIENMQVNTRVMgICAgICAqL1xuXG5cbiIsIi8qKlxuICogQ3VzdG9taXNhdGlvbnMgZm9yIHRoZSBncm91cCBibG9jay5cbiovXG5cbi8qIDEuIEdFTkVSQUwgQkxPQ0sgQ1VTVE9NSVNBVElPTlMgKi9cbi8qIDIuIENVU1RPTSBDTEFTU0VTICAgICAgICAgICAgICAgKi9cblxuIiwiLyoqXG4gKiBUd2Vha3MgYW5kIGNoYW5nZXMgZm9yIHRoZSBkZWZhdWx0IEd1dGVuYmVyZyBjb3ZlciBibG9jay5cbiAqIEluIHRoaXMgc2l0ZSwgd2UgZXhwZWN0IHRoZSBibG9jayB0byBiZSBpbnNpZGUgdGhlIGdyb3VwIGJsb2NrLlxuKi9cblxuLndwLWJsb2NrLWNvdmVyIHtcblxuXG59XG5cbiIsIi8qKlxuICogQ3VzdG9tc2F0aW9ucyB0byB0aGUgY29sdW1ucyBsYXlvdXRcbiovXG4iLCIvKipcbiAqIEN1c3RvbWlzYXRpb25zIGZvciBndXRlbmJlcmcgYnV0dG9uIGJsb2Nrcy5cbiovXG5cbi8qIDEuIENVU1RPTSBDTEFTU0VTICAgICovXG5cblxuIiwiLyoqXG4gKiBTdHlsaW5nIC8gbGF5b3V0IGZvciB0aGUgaGVhZGVyXG4qL1xuIiwiLyoqXG4gKiBTdHlsaW5nIGFuZCBsYXlvdXQgb3ZlcnJpZGVzIHNwZWNpZmljYWxseSBmb3IgdGhlIG1haW4gbWVudS5cbiAqIFdoZXJlIHBvc3NpYmxlIHdlIHdhbnQgdGhpcyBtYWluIG1lbnUgdG8gdXNlIGRlZmF1bHQgbmF2IHN0eWxlcyxcbiAqIHNvIHRoZXNlIHN0eWxlcyBhcmUgb25seSBzcGVjaWZpYyB0byB0aGUgbWFpbiBhbmQgYXBwbGllZCBub3doZXJlIGVsc2UuXG4qL1xuXG5cbi8qIDEuIEdFTkVSQUwgU1RZTEVTICAgICAqL1xuLyogMi4gUFJJTUFSWSBNRU5VICAgICAgICovXG4vKiAzLiBNT0JJTEUgTUVOVSAgICAgICAgKi9cblxuXG5cbi8qIDEuIEdFTkVSQUwgU1RZTEVTICAgICAqL1xuXG5cblxuLyogMi4gUFJJTUFSWSBNRU5VICAgICAgICovXG5cblxuXG4vKiAzLiBNT0JJTEUgTUVOVSAgICAgICAgKi9cbiIsIi8qKlxuICogU3R5bGluZyBhbmQgbGF5b3V0IG92ZXJyaWRlcyBzcGVjaWZpY2FsbHkgZm9yIHRoZSBtYWluIG1lbnUuXG4gKiBXaGVyZSBwb3NzaWJsZSB3ZSB3YW50IHRoaXMgbWFpbiBtZW51IHRvIHVzZSBkZWZhdWx0IG5hdiBzdHlsZXMsXG4gKiBzbyB0aGVzZSBzdHlsZXMgYXJlIG9ubHkgc3BlY2lmaWMgdG8gdGhlIG1haW4gYW5kIGFwcGxpZWQgbm93aGVyZSBlbHNlLlxuKi9cbiIsIi8qKlxuICogU3R5bGluZyBhbmQgY2xhc3NlcyBmb3IgZmVhdHVyZWQgaW1hZ2VzLlxuKi9cbiIsIi8qKlxuICogU0NTUyB0YXJnZXR0aW5nIHBvc3RzIG9mIGFsbCB0eXBlcy5cbiovXG5cbi8qIDEuIFBPU1QgR0VORVJBTCAgICAgICAqL1xuLyogMi4gUE9TVCBDVEEgICAgICAgICAgICovXG4vKiAzLiBQT1NUIFRFQVNFUiAgICAgICAgKi9cbi8qIDQuIFBPU1QgQVJDSElWRSAgICAgICAqL1xuXG4iLCIvKipcbiAqIEN1c3RvbWlzYXRpb25zIGZvciB0aGUgaG9tZXBhZ2Ugb25seS5cbiovXG5cbi8qIDEuIEhPTUVQQUdFIE5BViBTVFlMRVMgICAgICAgICAgKi9cbi8qIDIuIHdwLWJsb2NrLWdyb3VwX19ob21lIENMQVNTICAgKi9cbi8qIDMuIE9USEVSIFNUWUxJTkcgICAgICAgICAgICAgICAgKi9cblxuXG4iXX0= */
