{"version":3,"sourceRoot":"","sources":["../scss/publication-report.scss","../scss/base/_rem.scss","../scss/base/_variables.scss","../scss/base/_typography.scss","../scss/pages/_publication-report.scss","../scss/bootstrap/mixins/_breakpoints.scss"],"names":[],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAKA;ACHA;AACA;AACA;AACA;AAKA;AAGA;AAgFA;AA+EA;AA2CA;AAsCA;;ACjMI;EDlDJ;IASE;;EAGA;IACC;;;ACqCC;EDlDJ;IAkBE;;;ACgCE;EDvBH;IAGE;IACA,aAlCS;IAmCT;IACA;;EAGA;IACC;IACA;;;ACYA;EDND;IACC;;;ACKA;EDEF;IAEE;;;AAKD;EAFD;IAGE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;AAMH;EACC;;ACxBE;EDuBH;IAIE;;;AC3BC;EDmCD;IAGA;AACA;IAGA;IACA,OAhGS;IAiGT;IACA;IACA;IACA,aDpGU;;ECuGV;IACC;IACA;;EAGD;IACC;;EAGD;IACC;IACA;IACA;;EAGD;IACC;;EAEA;IACC;;EAIF;IACC;IACA;IACA;IACA;;EAEA;IACC;IACA;IACA;;EAEA;IACC;IACA;;EAEA;IACA;;EAMH;IACC;;EAGD;IACC;IACA;;EAGD;IACC;;;AAUH;EACC;;AAGD;AAAA;AAAA;EAGC;EACA;EACA;;AAOA;EACC;;AAIF;EACC;EACA;;AAGD;EACC;EACA;;AAKD;EACC;;AAQD;EACC;;AC9JE;ED6JH;IAIE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;AAWD;EAtBD;IAuBE;IACA;;;AAMD;AAAA;EAEC","file":"publication-report.css","sourcesContent":["/**\n * Report specific SCSS files\n * These styles only apply on the report pages\n * We already import the main css file in the header\n * in the theme, so we want to minimise the redeclared styles\n*/\n\n// media query mixins.\n// Bootstrap grid \n@import \"bootstrap/functions\";\n@import \"bootstrap/variables\";\n\n@import \"bootstrap/mixins/breakpoints\";\n@import \"bootstrap/mixins/grid-framework\";\n@import \"bootstrap/mixins/grid\";\n\n@import 'base/rem';\n@import 'base/variables';\n@import 'base/typography';\n\n\n\n// Page specific styles\n@import 'pages/publication-report';\n","/**\n* Sass function and mixin to use rem units with optional pixel fallback.\n* Author: Pierre Burel\n* Source: https://github.com/pierreburel/sass-rem\n*/\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == \"comma\" or $separator == \"space\" {\n    @return append($list, null, $separator);\n  } \n  \n  @if function-exists(\"list-separator\") == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n  \n  @each $value in $values {\n    @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == \"number\" and unit($value) == \"px\" and $to == \"rem\" {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == \"list\" {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == \"map\" {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}","/**\n * Variables for use throughout the rest of the SASS partials.\n*/\n\n\n// Commonly used layout dimensions.\n$border-width: 2px;\n$border-width-thick: 4px;\n\n$border-radius: 2rem;\n\n$reading-width: 800px;\n\n// $icon-size: 40px;\n\n$small-spacing: 1rem;\n$medium-spacing: 2rem;\n$large-spacing: 3rem;\n$xl-spacing: 4rem;","/**\n * Default typography styles and variables.\n * Overrides of key TwentyTwenty typography styles.\n*/\n\n/* Default typography styles and variables */\n$body-font: 'twkeverett', sans-serif;\n$title-font: 'twkeverett', sans-serif;\n\n// $default-font-weight: 300;\n$bold-font-weight: 700;\n","@charset \"UTF-8\";\n\n/* 1. VISIBILITY and LAYOUT OF TOC      */\n/* 2. CONTENTS OF TOC                   */\n/* 3. REPORT CONTENT                    */\n/* 4. FOOTNOTES AND SIDENOTES           */\n\n$toc-width: 19rem;\n\n// Everything is wrapped under this. Avoids repeating it.\n.gwf-publication-report {\n\n\n/* 1. VISIBILITY and LAYOUT OF TOC      */\n// Styles to control the visibility of the tables of contents.\n\n\n\t// This the page container level, one level below main.\n\t@include media-breakpoint-up(lg) {\n\t\tmargin: auto 0;\n\t\t//padding-right: 0;\n\n\t\t.row {\n\t\t\tmargin-right: 0;\n\t\t}\n\t}\n\n\t@include media-breakpoint-up(xl) {\n\t\tmargin: auto;\n\t\t//padding-right: 15px;\n\n\t\t.row {\n\t\t\t//margin-right: -15px;\n\t\t}\n\t}\n\n\t// Holder of the .entry-content.\n\t.nv-single-page-wrap {\n\n\t\t@include media-breakpoint-up(lg) {\n\t\t\tmax-width: calc( 100% - #{$toc-width} ) !important;\n\t\t\tmargin-left: $toc-width;\n\t\t\tmargin-right: 0;\n\t\t\tpadding-right: 0;\n\n\t\t\t// Should be the cover block at the top.\n\t\t\t.entry-content > *:first-child {\n\t\t\t\tmargin-left: -15px;\n\t\t\t\tmargin-right: -15px;\n\t\t\t}\n\t\t}\n\n\t\t@include media-breakpoint-up(xl) {\n\t\t\t// Should be the cover block at the top.\n\t\t\t.entry-content > *:first-child {\n\t\t\t\tmargin-right: 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t.nv-content-wrap {\n\n\t\t> *:not(:first-child) {\n\t\t\t@include media-breakpoint-up(xl) {\n\t\t\t\tmax-width: rem(700px) !important;\n\t\t\t}\n\t\t}\n\t\t> .wp-block-table.make-wide {\n\t\t\n\t\t\t@media (min-width: 1500px) {\n\t\t\t\tposition: relative;\n\t\t\t\tbackground-color: white;\n\t\t\t\tmargin-right: calc( 50% - 50vw );\n\t\t\t\tpadding-left: 15px;\n\t\t\t\tpadding-right: 15px;\n\t\t\t\twidth: 1170px;\n\t\t\t\tmax-width: none !important;\n\t\t\t\tmargin-left: calc( 50% - ( 1170px / 2 ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// The toc holder.\n\tnav {\n\t\tdisplay: none;\n\n\t\t@include media-breakpoint-up(lg) {\n\t\t\tdisplay: block;\n\t\t}\n\t}\n\n\n\n/* 2. CONTENTS OF TOC                   */\n\n  \tnav {\n\n\t\t@include media-breakpoint-up(lg) {\n\t\t\tposition: absolute;\n\t\t\t/* we use z-index, to put the toc behind the header */\n\t\t\t// z-index: 1;\n\t\t\t//top: 0;\n\t\t\toverflow: auto;\n\t\t\twidth: $toc-width;\n\t\t\theight: 100vh;\n\t\t\tpadding: 1rem;\n\t\t\tborder-right: 2px solid black;\n\t\t\tfont-family: $title-font;\n\n\t\t\t// Applied dynamically with JS.\n\t\t\t&.fixed-toc {\n\t\t\t\tposition: fixed;\n\t\t\t\ttop: 0;\n\t\t\t}\n\n\t\t\t.tocToggle {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\n\t\t\t.toc__heading {\n\t\t\t\tfont-size: rem(var(--wp--preset--font-size--medium));\n\t\t\t\tborder-bottom: $border-width solid black;\n\t\t\t\tmargin-top: 4rem;\n\t\t\t}\n\n\t\t\t.toc {\n\t\t\t\tposition: relative;\n\n\t\t\t\tbutton {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tol {\n\t\t\t\tlist-style: none;\n\t\t\t\tmargin-top: 0.5rem;\n\t\t\t\tmargin-left: 0;\n\t\t\t\tpadding-left: 0;\n\n\t\t\t\tli {\n\t\t\t\t\tfont-size: 0.9rem;\n\t\t\t\t\ttext-transform: uppercase;\n\t\t\t\t\tpadding: 0.3rem;\n\n\t\t\t\t\ta {\n\t\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\t\tcolor: black;\n\t\t\t\n\t\t\t\t\t\t&:hover {\n\t\t\t\t\t\ttext-decoration: underline;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdetails {\n\t\t\t\tmargin-top: 0.5rem;\n\t\t\t}\n\n\t\t\tdetails>summary {\n\t\t\t\tlist-style: none;\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\n\t\t\tsummary::-webkit-details-marker {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t}\n\t}\n\n\n\n/* 3. REPORT CONTENT                    */\n\n\t// Remove whitespace between the cover image and the top of the page.\n\t.entry-content {\n\t\tmargin-top: 0;\n\t} \n\n\tdl,\n\tol,\n\tul {\n\t\tmax-width: 50rem;\n\t\tpadding-left: 2rem;\n\t\t-webkit-padding-start: 5%;\n\t\t//width: 60%\n\t}\n\n\tli {\n\t\t//max-width: 45rem;\n\n\t\tp {\n\t\t\twidth: 100%;\n\t\t}\n\t}\n\n\ttable p {\n\t\twidth: 100%;\n\t\tfont-size: 0.9rem;\n\t}\n\n\t.nv-content-wrap {\n\t\tpadding-top: 0;\n\t\tmargin-top: 0;\n\t}\n\n\t// Most of the images are svgs, with a width and height of 100px in the HTML.\n\t// This makes them behave nicely.\n\tfigure.colwidth img {\n\t\twidth: 100%;\n\t\t// max-width: 50rem;\n\t}\n\n\n\n/* 4. FOOTNOTES AND SIDENOTES           */\n\n\t.sidenote {\n\t\tdisplay: none;\n\n\t\t@include media-breakpoint-up(xl) {\n\t\t\tdisplay: block;\n\t\t\tposition: relative;\n\t\t\twidth: rem(120px);\n\t\t\tfloat: right;\n\t\t\tclear: right;\n\t\t\tmargin: 0.3rem -21% 1rem 0;\n\t\t\tfont-size: 0.8rem;\n\t\t\tvertical-align: baseline;\n\t\n\t\t\tp,\n\t\t\tli {\n\t\t\t\t// width: 100%;\n\t\t\t\t// display: inline;\n\t\t\t\t// padding-left: 0;\n\t\t\t\t// font-size: 0.8rem\n\t\t\t}\n\t\t}\n\n\t\t@media screen and (min-width: 1300px) {\n\t\t\twidth: rem(150px);\n\t\t\tmargin-right: -30%;\n\t\t}\n\t}\n\n\t.footnotes {\n\n\t\tp,\n\t\tli {\n\t\t\tfont-size: 0.8rem\n\t\t}\n  \t}\n\n/* FILE END   */\n} // Close .gwf-publication-report class wrapper.","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}