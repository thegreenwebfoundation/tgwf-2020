/**
 * Report specific SCSS files
 * These styles only apply on the report pages
 * We already import the main css file in the header
 * in the theme, so we want to minimise the redeclared styles
*/
/**
* Sass function and mixin to use rem units with optional pixel fallback.
* Author: Pierre Burel
* Source: https://github.com/pierreburel/sass-rem
*/
/**
 * Variables for use throughout the rest of the SASS partials.
*/
/**
 * Default typography styles and variables.
 * Overrides of key TwentyTwenty typography styles.
*/
/* Default typography styles and variables */
/* 1. VISIBILITY and LAYOUT OF TOC      */
/* 2. CONTENTS OF TOC                   */
/* 3. REPORT CONTENT                    */
/* 4. FOOTNOTES AND SIDENOTES           */
.fog-of-enactment {
  /* 1. VISIBILITY and LAYOUT OF TOC      */
  /* 2. CONTENTS OF TOC                   */
  /* 3. REPORT CONTENT                    */
  /* 4. FOOTNOTES AND SIDENOTES           */
  /* FILE END   */ }
  @media (min-width: 960px) {
    .fog-of-enactment {
      margin: auto 0; }
      .fog-of-enactment .row {
        margin-right: 0; } }
  @media (min-width: 1170px) {
    .fog-of-enactment {
      margin: auto; } }
  @media (min-width: 960px) {
    .fog-of-enactment .nv-single-page-wrap {
      max-width: calc( 100% - 19rem) !important;
      margin-left: 19rem;
      margin-right: 0;
      padding-right: 0; }
      .fog-of-enactment .nv-single-page-wrap .entry-content > *:first-child {
        margin-left: -15px;
        margin-right: -15px; } }
  @media (min-width: 1170px) {
    .fog-of-enactment .nv-single-page-wrap .entry-content > *:first-child {
      margin-right: 0; } }
  @media (min-width: 1170px) {
    .fog-of-enactment .nv-content-wrap > *:not(:first-child) {
      max-width: 43.75rem !important; } }
  .fog-of-enactment nav {
    display: none; }
    @media (min-width: 960px) {
      .fog-of-enactment nav {
        display: block; } }
  @media (min-width: 960px) {
    .fog-of-enactment nav {
      position: absolute;
      /* we use z-index, to put the toc behind the header */
      overflow: auto;
      width: 19rem;
      height: 100vh;
      padding: 1rem;
      border-right: 2px solid black;
      font-family: "twkeverett", sans-serif; }
      .fog-of-enactment nav.fixed-toc {
        position: fixed;
        top: 0; }
      .fog-of-enactment nav .tocToggle {
        display: none; }
      .fog-of-enactment nav .toc__heading {
        font-size: var(--wp--preset--font-size--medium);
        border-bottom: 2px solid black;
        margin-top: 4rem; }
      .fog-of-enactment nav .toc {
        position: relative; }
        .fog-of-enactment nav .toc button {
          display: none; }
      .fog-of-enactment nav ol {
        list-style: none;
        margin-top: 0.5rem;
        margin-left: 0;
        padding-left: 0; }
        .fog-of-enactment nav ol li {
          font-size: 0.9rem;
          text-transform: uppercase;
          padding: 0.3rem; }
          .fog-of-enactment nav ol li a {
            text-decoration: none;
            color: black; }
            .fog-of-enactment nav ol li a:hover {
              text-decoration: underline; }
      .fog-of-enactment nav details {
        margin-top: 0.5rem; }
      .fog-of-enactment nav details > summary {
        list-style: none;
        cursor: pointer; }
      .fog-of-enactment nav summary::-webkit-details-marker {
        display: none; } }
  .fog-of-enactment .entry-content {
    margin-top: 0; }
  .fog-of-enactment dl,
  .fog-of-enactment ol,
  .fog-of-enactment ul {
    max-width: 50rem;
    padding-left: 2rem;
    -webkit-padding-start: 5%; }
  .fog-of-enactment li p {
    width: 100%; }
  .fog-of-enactment table p {
    width: 100%;
    font-size: 0.9rem; }
  .fog-of-enactment .nv-content-wrap {
    padding-top: 0;
    margin-top: 0; }
  .fog-of-enactment figure.colwidth img {
    width: 100%; }
  .fog-of-enactment .sidenote {
    display: none; }
    @media (min-width: 1170px) {
      .fog-of-enactment .sidenote {
        display: block;
        position: relative;
        width: 7.5rem;
        float: right;
        clear: right;
        margin: 0.3rem -21% 1rem 0;
        font-size: 0.8rem;
        vertical-align: baseline; } }
    @media screen and (min-width: 1300px) {
      .fog-of-enactment .sidenote {
        width: 9.375rem;
        margin-right: -30%; } }
  .fog-of-enactment .footnotes p,
  .fog-of-enactment .footnotes li {
    font-size: 0.8rem; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
